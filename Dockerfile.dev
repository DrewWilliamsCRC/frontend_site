ARG PYTHON_VERSION=3.10-slim

# Build stage
FROM python:${PYTHON_VERSION} as builder

# Set environment variables for build
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/usr/local/bin:$PATH"

# Create and set working directory
WORKDIR /build

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    libpq-dev \
    python3-dev \
    build-essential \
    libopenblas-dev \
    liblapack-dev \
    libfreetype6-dev \
    libpng-dev \
    libjpeg-dev \
    pkg-config \
    gfortran \
    cmake \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install critical packages first
RUN pip install --upgrade pip setuptools wheel && \
    pip install Flask flask-caching Flask-WTF gunicorn python-dotenv Flask-Limiter requests psycopg2-binary click urllib3 zipp

# Copy requirements and installation scripts
COPY requirements.txt requirements-dev.txt ./
COPY build-helpers/ ./build-helpers/

# Install dependencies
RUN chmod +x ./build-helpers/install-deps.sh && \
    ./build-helpers/install-deps.sh && \
    # Save the result of pip freeze for runtime
    pip freeze > /build/requirements-freeze.txt

# Final stage
FROM python:${PYTHON_VERSION}

# Set runtime environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    FLASK_APP=app.py \
    FLASK_DEBUG=1 \
    FLASK_ENV=development \
    PATH="/usr/local/bin:$PATH"

# Create and set working directory
WORKDIR /app

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    postgresql-client \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy from builder stage only what's needed
COPY --from=builder /usr/local/lib/python3.10/site-packages/ /usr/local/lib/python3.10/site-packages/
COPY --from=builder /usr/local/bin/ /usr/local/bin/

# Install critical Python packages directly in the final stage too
# This ensures they're available even with mounted code
RUN pip install python-dotenv flask flask-caching flask-wtf flask-limiter requests psycopg2-binary click urllib3

# Create log directory
RUN mkdir -p /app/logs && chmod 777 /app/logs

# Expose the port the app runs on
EXPOSE 5001

# Command to run when container starts
CMD ["python", "-m", "flask", "run", "--host=0.0.0.0", "--port=5001", "--debug"] 