services:
  db:
    # Using Debian-based image for better compatibility with PostgreSQL client tools
    image: postgres:16
    platform: linux/amd64
    user: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      POSTGRES_PASSWORD_ENCRYPTION: scram-sha-256
      PGDATA: /var/lib/postgresql/data
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@localhost}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
      - ./.env:/tmp/.env:ro  # Mount .env file to allow access to variables
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U frontend"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    networks:
      - app_network

  ai_server:
    image: dawttu00/dawttu_private:ai_server
    platform: linux/amd64
    user: aiuser
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - SECRET_KEY=${SECRET_KEY}
      - OWM_API_KEY=${OWM_API_KEY}
      - FLASK_DEBUG=0
      - FLASK_ENV=production
      - PORT=5002
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
    ports:
      - "127.0.0.1:5002:5002"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./.env:/app/.env:ro  # Mount .env file from project root
      - ai_data:/app/ai_experiments/data
      - ai_models:/app/ai_experiments/models
      - ai_cache:/tmp/ai_cache
    tmpfs:
      - /tmp:exec,mode=1777,size=512M
      - /run:mode=1777,size=64M
      - /var/run:mode=1777,size=64M
      - /app/logs:mode=1777,size=128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    networks:
      - app_network

  frontend:
    image: dawttu00/dawttu_private:frontend
    platform: linux/amd64
    command: ["gunicorn", "--bind", "0.0.0.0:${PORT}", "--workers", "1", "--log-level", "debug", "--error-logfile", "/app/logs/gunicorn-error.log", "--access-logfile", "/app/logs/gunicorn-access.log", "app:app"]
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - SECRET_KEY=${SECRET_KEY}
      - FLASK_DEBUG=0
      - FLASK_ENV=production
      - PORT=5000
    volumes:
      - ./.env:/app/.env:ro  # Mount .env file from project root
    ports:
      - "127.0.0.1:${PORT}:${PORT}"
    depends_on:
      db:
        condition: service_healthy
      ai_server:
        condition: service_started
    read_only: true
    tmpfs:
      - /tmp:exec,mode=1777,size=512M
      - /run:mode=1777,size=64M
      - /var/run:mode=1777,size=64M
      - /app/logs:mode=1777,size=128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    networks:
      - app_network

volumes:
  postgres_data:
    driver: local
  ai_data:
    driver: local
  ai_models:
    driver: local
  ai_cache:
    driver: local

networks:
  app_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.50.0.0/16
          gateway: 172.50.0.1