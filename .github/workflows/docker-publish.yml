name: Docker Build and Test

# Separate triggers for different events
on:
  # PR events only trigger tests
  pull_request:
    branches: [ "main" ]
  # Push to main only triggers publish
  push:
    branches: [ "main" ]

# Add permissions block
permissions:
  contents: read
  packages: write

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  # Explicitly set Python version
  PYTHON_VERSION: 3.10-alpine

jobs:
  # Python unit testing - only run on PRs
  python-tests:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: db
          POSTGRES_PASSWORD: testing123
          POSTGRES_DB: frontend
          POSTGRES_HOST_AUTH_METHOD: scram-sha-256
          POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
          POSTGRES_PASSWORD_ENCRYPTION: scram-sha-256
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Create test .env file
        run: |
          cp .env.example .env
          echo "SECRET_KEY=test-secret-key" >> .env
          echo "FLASK_ENV=testing" >> .env
          echo "DATABASE_URL=postgresql://db:testing123@localhost:5432/frontend" >> .env
          
      - name: Run tests
        id: pytest
        run: pytest tests/ -v || echo "TESTS_FAILED=true" >> $GITHUB_OUTPUT

  # Docker testing - only run on PRs
  docker-test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      DOCKER_CLI_EXPERIMENTAL: enabled
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      # Build test image first to verify functionality
      - name: Build test image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./dockerfile
          platforms: linux/amd64
          push: false
          tags: frontend:test
          build-args: |
            BUILDPLATFORM=linux/amd64
            TARGETPLATFORM=linux/amd64
            PYTHON_VERSION=3.10-alpine
          provenance: false
          load: true

      # Set up test environment
      - name: Create test environment
        run: |
          mkdir -p logs data
          chmod -R 777 logs data
          
          # Create test env file
          cat << EOF > .env
          SECRET_KEY="test-key-not-for-production"
          FLASK_DEBUG=0
          FLASK_ENV=testing
          PORT=5000
          POSTGRES_USER=db
          POSTGRES_PASSWORD=testing123
          POSTGRES_DB=frontend
          DATABASE_URL=postgresql://db:testing123@db:5432/frontend
          POSTGRES_HOST_AUTH_METHOD=scram-sha-256
          POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
          POSTGRES_PASSWORD_ENCRYPTION=scram-sha-256
          EOF

      # Run critical functionality tests
      - name: Test critical functionality
        run: |
          # Start test containers
          docker compose -f docker-compose.ci.yml up -d db
          
          # Wait for database
          echo "Waiting for database to be ready..."
          for i in {1..30}; do
            if docker compose -f docker-compose.ci.yml exec -T db pg_isready -U db -d frontend; then
              echo "Database is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Database failed to start"
              docker compose -f docker-compose.ci.yml logs db
              exit 1
            fi
            sleep 2
          done
          
          # Initialize database schema and create admin user
          docker compose -f docker-compose.ci.yml exec -T db psql -U db -d frontend << 'EOSQL'
          CREATE TABLE IF NOT EXISTS users (
              id SERIAL PRIMARY KEY,
              username VARCHAR(255) UNIQUE NOT NULL,
              email VARCHAR(255) NOT NULL,
              password_hash TEXT NOT NULL,
              news_categories TEXT,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          
          -- Insert test admin user with known password
          INSERT INTO users (username, email, password_hash)
          VALUES (
              'admin',
              'admin@localhost',
              'pbkdf2:sha256:600000$vf9Ul3qpDdGQDSxs$f3cd8235cc3b562c523e08b885c66dd6c7c34c0ccd527b4a6e8cc9e10d39f9e9'
          ) ON CONFLICT (username) DO NOTHING;
          EOSQL
          
          # Start frontend
          docker compose -f docker-compose.ci.yml up -d frontend
          
          # Wait for frontend
          echo "Waiting for frontend to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:5000/health > /dev/null; then
              echo "Frontend is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Frontend failed to start"
              docker compose -f docker-compose.ci.yml logs frontend
              exit 1
            fi
            sleep 2
          done
          
          # Test login functionality with form data (matching production)
          echo "Testing login functionality..."
          response=$(curl -s -X POST \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "username=admin&password=admin123" \
            http://localhost:5000/login)
          
          if ! echo "$response" | grep -q "success\|token"; then
            echo "Login endpoint not responding correctly"
            echo "Response: $response"
            docker compose -f docker-compose.ci.yml logs frontend
            exit 1
          fi

  # Publish job only runs on push to main
  publish:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      DOCKER_CLI_EXPERIMENTAL: enabled
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
      DOCKER_PUSH: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push production image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./dockerfile
          platforms: linux/amd64
          push: true
          tags: dawttu00/dawttu_private:frontend
          build-args: |
            BUILDPLATFORM=linux/amd64
            TARGETPLATFORM=linux/amd64
            PYTHON_VERSION=3.10-alpine
          provenance: false
          outputs: type=registry,push=true
          no-cache: false
          pull: true