services:
  db:
    image: postgres:16-alpine
    platform: linux/amd64
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256
      POSTGRES_PASSWORD_ENCRYPTION: scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app_network

  ai_server:
    image: ai_server:test
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - SECRET_KEY=${SECRET_KEY}
      - FLASK_ENV=testing
      - PORT=5002
      - ALPHA_VANTAGE_API_KEY=test-key
      - CI_BUILD=true
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "5002:5002"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:5002/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    command: ["gunicorn", "--bind", "0.0.0.0:5002", "--workers", "1", "--timeout", "30", "ai_server:app"]
    networks:
      - app_network

  frontend:
    image: frontend:test
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - SECRET_KEY=${SECRET_KEY}
      - FLASK_ENV=testing
      - PORT=${PORT}
      - ALPHA_VANTAGE_API_KEY=test-key
      - AI_SERVER_URL=http://ai_server:5002
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      db:
        condition: service_healthy
      ai_server:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:${PORT}/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - app_network

volumes:
  postgres_data:
    driver: local

networks:
  app_network:
    driver: bridge 