services:
  db:
    # Using Debian-based image for better compatibility with PostgreSQL client tools
    image: postgres:16
    platform: linux/amd64
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      POSTGRES_PASSWORD_ENCRYPTION: scram-sha-256
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@localhost}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app_network

  ai_server:
    build:
      context: .
      dockerfile: Dockerfile.ai
      args:
        - TARGETPLATFORM=linux/amd64
        - BUILDPLATFORM=linux/amd64
        - CI_BUILD=true
    platform: linux/amd64
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      SECRET_KEY: ${SECRET_KEY}
      OWM_API_KEY: ${OWM_API_KEY}
      FLASK_ENV: testing
      FLASK_APP: ai_server.py
      FLASK_DEBUG: 1
      PORT: 5002
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY}
      CI_BUILD: true
      CI_MODE: true
      PYTHONUNBUFFERED: 1
    volumes:
      - .:/app
      - ./logs:/app/logs
      - ./ai_experiments/data:/app/ai_experiments/data
    ports:
      - "5002:5002"
    depends_on:
      db:
        condition: service_healthy
    # Use the entrypoint script for consistent startup behavior
    entrypoint: ["/usr/local/bin/ai_entrypoint.sh"]
    networks:
      - app_network

  frontend:
    build:
      context: .
      dockerfile: dockerfile
      args:
        - TARGETPLATFORM=linux/amd64
        - BUILDPLATFORM=linux/amd64
        - PYTHON_VERSION=3.10-alpine
    platform: linux/amd64
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      SECRET_KEY: ${SECRET_KEY}
      FLASK_DEBUG: 0
      FLASK_ENV: testing
      PORT: ${PORT}
    volumes:
      - ./logs:/app/logs
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      db:
        condition: service_healthy
    command: ["gunicorn", "--bind", "0.0.0.0:${PORT}", "--workers", "1", "--log-level", "debug", "--error-logfile", "/app/logs/gunicorn-error.log", "--access-logfile", "/app/logs/gunicorn-access.log", "app:app"]
    networks:
      - app_network

volumes:
  postgres_data:
    driver: local

networks:
  app_network:
    driver: bridge

# Add environment variables that should be set for all services
x-environment: &default-environment
  CI_MODE: "true" 